// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role{
  General
  Manager
}

enum Gender {
  Male
  Female
}

enum Status {
  Apply
  Pass
  Reject
}

model Users {
  userId      Int         @id @default(autoincrement()) @map("userId")
  email       String      @unique @map("email")
  password    String      @map("password")
  role        Role        @default(General) @map("role")

  createdAt   DateTime    @default(now()) @map("createdAt")
  updatedAt   DateTime    @updatedAt  @map("updatedAt")

  Userinfos   Userinfos?
  Resumes     Resumes[]
}

model Userinfos {
  infoId      Int         @id @default(autoincrement()) @map("infoId")
  UserId      Int         @unique @map("UserId")

  name        String      @map("name")
  age         Int         @map("age")
  gender      Gender      @map("gender")
  profilimage String?     @map("profilimage")
  createdAt   DateTime    @default(now()) @map("createdAt")
  updatedAt   DateTime    @updatedAt  @map("updatedAt")

  user        Users       @relation(fields:[UserId],references:[userId],onDelete:Cascade)

  @@map("Userinfos")
}

model Resumes {
  resumeId          Int         @id @default(autoincrement()) @map("resumeId")
  UserId            Int         @map("UserId")
  name              String      @map("name")
  age               Int         @map("age")
  content           String      @map("content")
  status            Status      @default(Apply) @map("status")
  decision_reason   String?     @map("decision_reason")
  manager           String?      @map("manager")

  user              Users       @relation(fields:[UserId],references:[userId],onDelete:Cascade)
}

model RefreshTokens {
  tokenId     Int       @id @default(autoincrement()) @map("tokenId")
  UserId      Int       @map("UserId")
  token       String    @map("token")
  secret_key  String    @map("secret_key")
  expiresAt   DateTime  @default(now()) @map("expiresAt")
  createdAt   DateTime  @map("createdAt")
}